{"version":3,"file":"content-parser.min.js","sources":["../node_modules/content/lib/index.js"],"sourcesContent":["'use strict';\n\n// Load modules\n\nconst Boom = require('boom');\n\n\n// Declare internals\n\nconst internals = {};\n\n\n/*\n    RFC 7231 Section 3.1.1.1\n\n    media-type = type \"/\" subtype *( OWS \";\" OWS parameter )\n    type       = token\n    subtype    = token\n    parameter  = token \"=\" ( token / quoted-string )\n*/\n\n//                             1: type/subtype    2: params\ninternals.contentTypeRegex = /^([^\\/\\s]+\\/[^\\s;]+)(.*)?$/;\n\n//                                        1: \"b\"   2: b\ninternals.paramsRegex = /;\\s*boundary=(?:\"([^\"]+)\"|([^;\"\\s]+))/i;\n\n\nexports.type = function (header) {\n\n    if (!header) {\n        throw Boom.badRequest('Invalid content-type header');\n    }\n\n    const match = header.match(internals.contentTypeRegex);\n    if (!match) {\n        throw Boom.badRequest('Invalid content-type header');\n    }\n\n    const result = {\n        mime: match[1].toLowerCase()\n    };\n\n    if (result.mime.indexOf('multipart/') === 0) {\n        const params = match[2];\n        if (params) {\n            const param = params.match(internals.paramsRegex);\n            if (param) {\n                result.boundary = param[1] || param[2];\n            }\n        }\n\n        if (!result.boundary) {\n            throw Boom.badRequest('Invalid content-type header: multipart missing boundary');\n        }\n    }\n\n    return result;\n};\n\n\n/*\n    RFC 6266 Section 4.1 (http://tools.ietf.org/html/rfc6266#section-4.1)\n\n    content-disposition = \"Content-Disposition\" \":\" disposition-type *( \";\" disposition-parm )\n    disposition-type    = \"inline\" | \"attachment\" | token                                           ; case-insensitive\n    disposition-parm    = filename-parm | token [ \"*\" ] \"=\" ( token | quoted-string | ext-value)    ; ext-value defined in [RFC5987], Section 3.2\n\n    Content-Disposition header field values with multiple instances of the same parameter name are invalid.\n\n    Note that due to the rules for implied linear whitespace (Section 2.1 of [RFC2616]), OPTIONAL whitespace\n    can appear between words (token or quoted-string) and separator characters.\n\n    Furthermore, note that the format used for ext-value allows specifying a natural language (e.g., \"en\"); this is of limited use\n    for filenames and is likely to be ignored by recipients.\n*/\n\n\ninternals.contentDispositionRegex = /^\\s*form-data\\s*(?:;\\s*(.+))?$/i;\n\n//                                        1: name     2: *            3: ext-value                      4: quoted  5: token\ninternals.contentDispositionParamRegex = /([^\\=\\*\\s]+)(\\*)?\\s*\\=\\s*(?:([^;'\"\\s]+\\'[\\w-]*\\'[^;\\s]+)|(?:\\\"([^\"]*)\\\")|([^;\\s]*))(?:\\s*(?:;\\s*)|$)/g;\n\nexports.disposition = function (header) {\n\n    if (!header) {\n        throw Boom.badRequest('Missing content-disposition header');\n    }\n\n    const match = header.match(internals.contentDispositionRegex);\n    if (!match) {\n        throw Boom.badRequest('Invalid content-disposition header format');\n    }\n\n    const parameters = match[1];\n    if (!parameters) {\n        throw Boom.badRequest('Invalid content-disposition header missing parameters');\n    }\n\n    const result = {};\n    parameters.replace(internals.contentDispositionParamRegex, ($0, $1, $2, $3, $4, $5) => {\n\n        if ($2) {\n            if (!$3) {\n                throw Boom.badRequest('Invalid content-disposition header format includes invalid parameters');\n            }\n\n            try {\n                result[$1] = decodeURIComponent($3.split('\\'')[2]);\n            }\n            catch (err) {\n                throw Boom.badRequest('Invalid content-disposition header format includes invalid parameters');\n            }\n        }\n        else {\n            result[$1] = $4 || $5 || '';\n        }\n    });\n\n    if (!result.name) {\n        throw Boom.badRequest('Invalid content-disposition header missing name parameter');\n    }\n\n    return result;\n};\n"],"names":["internals","contentTypeRegex","paramsRegex","contentDispositionRegex","contentDispositionParamRegex","header","Boom.badRequest","match","result","mime","toLowerCase","indexOf","params","param","boundary","parameters","replace","$0","$1","$2","$3","$4","$5","decodeURIComponent","split","err","name"],"mappings":"6EASA,MAAMA,EAAY,CAalBC,iBAA6B,6BAG7BC,YAAwB,0CAqDxBF,EAAUG,wBAA0B,kCAGpCH,EAAUI,6BAA+B,sHArD1B,SAAUC,GAErB,IAAKA,EACD,MAAMC,EAAgB,+BAG1B,MAAMC,EAAQF,EAAOE,MAAMP,EAAUC,kBACrC,IAAKM,EACD,MAAMD,EAAgB,+BAG1B,MAAME,EAAS,CACXC,KAAMF,EAAM,GAAGG,eAGnB,GAA0C,IAAtCF,EAAOC,KAAKE,QAAQ,cAAqB,CACzC,MAAMC,EAASL,EAAM,GACrB,GAAIK,EAAQ,CACR,MAAMC,EAAQD,EAAOL,MAAMP,EAAUE,aACjCW,IACAL,EAAOM,SAAWD,EAAM,IAAMA,EAAM,IAI5C,IAAKL,EAAOM,SACR,MAAMR,EAAgB,2DAI9B,OAAOE,iBA0BW,SAAUH,GAE5B,IAAKA,EACD,MAAMC,EAAgB,sCAG1B,MAAMC,EAAQF,EAAOE,MAAMP,EAAUG,yBACrC,IAAKI,EACD,MAAMD,EAAgB,6CAG1B,MAAMS,EAAaR,EAAM,GACzB,IAAKQ,EACD,MAAMT,EAAgB,yDAG1B,MAAME,EAAS,GAoBf,GAnBAO,EAAWC,QAAQhB,EAAUI,6BAA8B,CAACa,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,KAE5E,GAAIH,EAAI,CACJ,IAAKC,EACD,MAAMd,EAAgB,yEAG1B,IACIE,EAAOU,GAAMK,mBAAmBH,EAAGI,MAAM,KAAM,IAEnD,MAAOC,GACH,MAAMnB,EAAgB,+EAI1BE,EAAOU,GAAMG,GAAMC,GAAM,MAI5Bd,EAAOkB,KACR,MAAMpB,EAAgB,6DAG1B,OAAOE"}